import math
import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np
from torch_geometric.nn import GAE
from numpy.lib.shape_base import kron
from sklearn.cluster import KMeans
from torch_geometric.datasets import Planetoid
import torch_geometric.transforms as T
from torch_geometric.nn import GCNConv
from torch_geometric.utils import train_test_split_edges
# from kmeans_pytorch import kmeans

### torch version too old for timm
### https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/layers


###################---------Misc---------###################
def drop_path(x, drop_prob: float = 0., training: bool = False, scale_by_keep: bool = True):
    """Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).
    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,
    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...
    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for
    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use
    'survival rate' as the argument.
    """
    if drop_prob == 0. or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0],) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = x.new_empty(shape).bernoulli_(keep_prob)
    if keep_prob > 0.0 and scale_by_keep:
        random_tensor.div_(keep_prob)
    return x * random_tensor

class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).
    """
    def __init__(self, drop_prob=None, scale_by_keep=True):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob
        self.scale_by_keep = scale_by_keep

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training, self.scale_by_keep)

### torch version too old for timm
### https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/layers
def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. " "The distribution of values may be incorrect.", stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor

def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)
###################---------Misc---------###################



###############---------Class_Import---------###############
def import_class(name):
    components = name.split('.')
    mod = __import__(components[0])
    for comp in components[1:]:
        mod = getattr(mod, comp)
    return mod
###############---------Class_Import---------###############



#############-------Weight_Initialization-------#############
def conv_branch_init(conv, branches):
    weight = conv.weight
    n = weight.size(0)
    k1 = weight.size(1)
    k2 = weight.size(2)
    nn.init.normal_(weight, 0, math.sqrt(2. / (n * k1 * k2 * branches)))
    if conv.bias is not None:
        nn.init.constant_(conv.bias, 0)

def conv_init(conv):
    if conv.weight is not None:
        nn.init.kaiming_normal_(conv.weight, mode='fan_out')
    if conv.bias is not None:
        nn.init.constant_(conv.bias, 0)

def bn_init(bn, scale):
    nn.init.constant_(bn.weight, scale)
    nn.init.constant_(bn.bias, 0)

def weights_init(m):
    classname = m.__class__.__name__
    if classname.find('Conv') != -1:
        if hasattr(m, 'weight'):
            nn.init.kaiming_normal_(m.weight, mode='fan_out')
        if hasattr(m, 'bias') and m.bias is not None and isinstance(m.bias, torch.Tensor):
            nn.init.constant_(m.bias, 0)
    elif classname.find('BatchNorm') != -1:
        if hasattr(m, 'weight') and m.weight is not None:
            m.weight.data.normal_(1.0, 0.02)
        if hasattr(m, 'bias') and m.bias is not None:
            m.bias.data.fill_(0)
#############-------Weight_Initialization-------#############



##%%%%%%%%%%%%%%%%%%%%--------TCN--------%%%%%%%%%%%%%%%%%%%%##
###############---------T_Convolution---------###############
class TemporalConv(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size, stride=1, dilation=1):
        super(TemporalConv, self).__init__()
        
        pad = (kernel_size + (kernel_size-1) * (dilation-1) - 1) // 2
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size=(kernel_size, 1), padding=(pad, 0), stride=(stride, 1), dilation=(dilation, 1),)
        self.bn = nn.BatchNorm2d(out_channels)

    def forward(self, x):
        x = self.conv(x)
        x = self.bn(x)
        return x
###############---------T_Convolution---------###############

##################--------TCN_main()--------##################
class MultiScale_TemporalConv(nn.Module):
    def __init__(self,
                 in_channels,
                 out_channels,
                 kernel_size=3,
                 stride=1,
                 dilations=[1,2,3,4],
                 residual=False,
                 residual_kernel_size=1):

        super().__init__()
        assert out_channels % (len(dilations) + 2) == 0, '# out channels should be multiples of # branches'

        #Update_IntBranch&KernelSize
        self.num_branches = len(dilations) + 2
        branch_channels = out_channels // self.num_branches
        if type(kernel_size) == list:
            assert len(kernel_size) == len(dilations)
        else:
            kernel_size = [kernel_size]*len(dilations)
        
        # Temporal Convolution branches
        self.branches = nn.ModuleList([nn.Sequential(nn.Conv2d(in_channels, branch_channels, kernel_size=1, padding=0), 
                                                     nn.BatchNorm2d(branch_channels), 
                                                     nn.ReLU(inplace=True),
                                                     TemporalConv(branch_channels, branch_channels, kernel_size=ks, stride=stride, dilation=dilation),)
                                                     for ks, dilation in zip(kernel_size, dilations)])
        # Additional Max & 1x1 branch
        self.branches.append(nn.Sequential(nn.Conv2d(in_channels, branch_channels, kernel_size=1, padding=0),
                                           nn.BatchNorm2d(branch_channels),
                                           nn.ReLU(inplace=True),
                                           nn.MaxPool2d(kernel_size=(3,1), stride=(stride,1), padding=(1,0)),
                                           nn.BatchNorm2d(branch_channels)))

        self.branches.append(nn.Sequential(nn.Conv2d(in_channels, branch_channels, kernel_size=1, padding=0, stride=(stride,1)),
                                           nn.BatchNorm2d(branch_channels)))

        #Residual Connection
        if not residual:
            self.residual = lambda x: 0
        elif (in_channels == out_channels) and (stride == 1):
            self.residual = lambda x: x
        else:
            self.residual = TemporalConv(in_channels, out_channels, kernel_size=residual_kernel_size, stride=stride)
        self.apply(weights_init)

    def forward(self, x):
        # Input dim: (N,C,T,V)
        res = self.residual(x)
        branch_outs = []
        for tempconv in self.branches:
            out = tempconv(x)
            branch_outs.append(out)

        out = torch.cat(branch_outs, dim=1)
        out += res
        return out
##################--------TCN_main()--------##################
##%%%%%%%%%%%%%%%%%%%%--------TCN--------%%%%%%%%%%%%%%%%%%%%##



##################-----------Residual_TCN-----------##################
class unit_tcn(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size=5, stride=1):
        super(unit_tcn, self).__init__()
        
        pad = int((kernel_size - 1) / 2)
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size=(kernel_size, 1), padding=(pad, 0), stride=(stride, 1), groups=1)
        self.bn = nn.BatchNorm2d(out_channels)
        self.relu = nn.ReLU(inplace=True)
        conv_init(self.conv)
        bn_init(self.bn, 1)

    def forward(self, x):
        x = self.bn(self.conv(x))
        return x
##################-----------Residual_TCN-----------##################



##%%%%%%%%%%%%%%%%-----------VIT-----------%%%%%%%%%%%%%%%%##
##################-----------MLP-----------##################
class Mlp(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0., num_heads=None):
        super().__init__()
        
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Conv2d(in_features, hidden_features, 1)
        self.act = act_layer()
        self.fc2 = nn.Conv2d(hidden_features, out_features, 1)
        self.drop = nn.Dropout(drop)
        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        
        return x
##################-----------MLP-----------##################

##################-----------MHSA-----------##################
class MHSA(nn.Module):
    def __init__(self, dim_in, dim, A, num_heads=6, qkv_bias=False, qk_scale=None, attn_drop=0., 
                 proj_drop=0., insert_cls_layer=0, pe=False, num_point=25, outer=True, layer=0,**kwargs):
        super().__init__()
        self.num_heads = num_heads
        self.dim = dim
        head_dim = dim // num_heads
        self.scale = qk_scale or head_dim ** -0.5
        self.num_point = num_point
        self.layer = layer
        
        h1 = A.sum(0)
        h1[h1 != 0] = 1
        h = [None for _ in range(num_point)]
        h[0] = np.eye(num_point)
        h[1] = h1
        self.hops = 0*h[0]
        for i in range(2, num_point):
            h[i] = h[i-1] @ h1.transpose(0, 1)
            h[i][h[i] != 0] = 1
        for i in range(num_point-1, 0, -1):
            if np.any(h[i]-h[i-1]):
                h[i] = h[i] - h[i - 1]
                self.hops += i*h[i]
            else:
                continue

        self.hops = torch.tensor(self.hops).long()
        self.rpe = nn.Parameter(torch.zeros((self.hops.max()+1, dim)))
        self.w1 = nn.Parameter(torch.zeros(num_heads, head_dim))
        A = A.sum(0)
        A[:, :] = 0
        self.outer = nn.Parameter(torch.stack([torch.eye(A.shape[-1]) for _ in range(num_heads)], dim=0), requires_grad=True)
        self.alpha = nn.Parameter(torch.zeros(1), requires_grad=True)
        self.kv = nn.Conv2d(dim_in, dim * 2, 1, bias=qkv_bias)
        self.q = nn.Conv2d(dim_in, dim, 1, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Conv2d(dim, dim, 1, groups=6)
        self.proj_drop = nn.Dropout(proj_drop)
        self.apply(self._init_weights)
        self.insert_cls_layer = insert_cls_layer

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def forward(self, x, e):
        N, C, T, V = x.shape
        kv = self.kv(x).reshape(N, 2, self.num_heads, self.dim // self.num_heads, T, V).permute(1, 0, 4, 2, 5, 3)
        k, v = kv[0], kv[1]
        ## n t h v c
        q = self.q(x).reshape(N, self.num_heads, self.dim // self.num_heads, T, V).permute(0, 3, 1, 4, 2)
        e_k = e.reshape(N, self.num_heads, self.dim // self.num_heads, T, V).permute(0, 3, 1, 4, 2)
        pos_emb = self.rpe[self.hops]
        k_r = pos_emb.view(V, V, self.num_heads, self.dim // self.num_heads)
        b = torch.einsum("bthnc, nmhc->bthnm", q, k_r)
        c = torch.einsum("bthnc, bthmc->bthnm", q, e_k)
        d = torch.einsum("hc, bthmc->bthm", self.w1, e_k).unsqueeze(-2)
        a = q @ k.transpose(-2, -1)
        attn = a + b + c + d
        attn = attn * self.scale
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)
        x = (self.alpha * attn + self.outer) @ v
        # x = attn @ v
        x = x.transpose(3, 4).reshape(N, T, -1, V).transpose(1, 2)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x
##################-----------MHSA-----------##################

class HGconv(nn.Module):
    def __init__(self,dim_in,dim,pe,adp=False):
        super().__init__()
        self.pe_proj = nn.Conv2d(dim_in, dim, 1, bias=False)
        self.pe = pe
    def forward(self,x,joint_label,he_weight,og_joint,og_he_weight):    
        b=x.shape[0]
        label = F.one_hot(torch.tensor(og_joint)).float().to(x.device)
        label1=label/label.sum(dim=1,keepdim=True)
        label1=label1/torch.sqrt(label.sum(dim=2,keepdim=True))
        og_he_weight=og_he_weight.repeat(25,1,1)
        og_he_weight=og_he_weight.permute(1,0,2)
        label1=og_he_weight*label1
        label1=label1.permute(0,2,1)
        norm_label=(label/torch.sqrt(label.sum(dim=2,keepdim=True)))
        h_adj=torch.matmul(norm_label,label1)
        h_adj=h_adj.unsqueeze(3)
        h_adj=h_adj.permute(0,3,1,2)
        x1=x.permute(0,2,1,3)
        x1=x1.permute(0,1,3,2)
        z=torch.matmul(h_adj,x1)
        z=z.permute(0,3,1,2)
        z = self.pe_proj(z).permute(3, 0, 1, 2)
        e1=z.permute(1,2,3,0)
        label = F.one_hot(torch.tensor(joint_label)).float().to(x.device)
        label1=label/(label.sum(dim=1,keepdim=True)+1e-6)
        label1=label1/torch.sqrt(label.sum(dim=2,keepdim=True))
        he_weight=he_weight.repeat(25,1,1)
        he_weight=he_weight.permute(1,0,2)
        label1=he_weight*label1
        label1=label1.permute(0,2,1)
        norm_label=(label/torch.sqrt(label.sum(dim=2,keepdim=True)))
        h_adj=torch.matmul(norm_label,label1)
        h_adj=h_adj.unsqueeze(3)
        h_adj=h_adj.permute(0,3,1,2)
        x=x.permute(0,2,1,3)
        x=x.permute(0,1,3,2)
        z=torch.matmul(h_adj,x)
        z=z.permute(0,3,1,2)
        z = self.pe_proj(z).permute(3, 0, 1, 2)
        e2=z.permute(1,2,3,0)
        e=0.6*e1+0.4*e2
        return e
# class HGconv(nn.Module):
#     def __init__(self,dim_in,dim,pe):
#         super().__init__()
#         self.pe_proj = nn.Conv2d(dim_in, dim, 1, bias=False)
#         self.pe = pe
#     def forward(self,x,joint_label,he_weight):
#         # print('enter cnn')
#         # print('inp to hyp is ',x.shape)
# #         input to hgc is  torch.Size([2, 3, 64, 25])
# # label1 shape is torch.Size([25, 5])
# # he_weight shape torch.Size([25, 5])
# # label 1 shape torch.Size([5, 25])
# # shape of h_adj is  torch.Size([25, 25])
# # shape of z is  torch.Size([2, 3, 64, 25])
# # shape of final z is torch.Size([25, 2, 216, 64])
# # output of hgc is  torch.Size([2, 216, 64, 25])
#         print('input to hgc is ', x.shape)
        

#         label = F.one_hot(torch.tensor(joint_label)).float().to(x.device)
#         # print(label)
#         # print('incidence matrix transpose label shape ',label.shape)
#     #     # print('shape of x is ', x.shape)
#     # print('the input of hyp feature trans ', x.shape)
#         label1=label/label.sum(dim=0,keepdim=True)
#         label1=label1/torch.sqrt(label.sum(dim=1,keepdim=True))
        
#         print('label1 shape is', label.shape)
#         he_weight=he_weight.repeat(25).reshape(25,5)
#         # print(he_weight)
#         print('he_weight shape',he_weight.shape)
#         label1=he_weight*label1
#         # print('label1 before permute shape',label1.shape)
#         label1=label1.permute(1,0)
#         print('label 1 shape',label1.shape)
#         # label1=label[joint_label]
#         norm_label=(label/torch.sqrt(label.sum(dim=1,keepdim=True)))
#         h_adj=torch.matmul(norm_label,label1)
#         print('shape of h_adj is ',h_adj.shape)


#         # print('label1 shape',label1.shape)
#         z=x@h_adj
#         print('shape of z is ', z.shape)

#         # z = x @ (label / label.sum(dim=0, keepdim=True))
#         #print('incidence matrix transpose  after normalisation multiplied to N*C matrix for getting representation',z.shape)

#         # w/o proj
#         # z = z.permute(3, 0, 1, 2)
#         # w/ proj
#         z = self.pe_proj(z).permute(3, 0, 1, 2)
#         #print('hyperedge representation shape after transformation ',z.shape)
#         print('shape of final z is', z.shape)
#         e=z.permute(1,2,3,0)

#         # e = z[joint_label].permute(1, 2, 3, 0)
#         #print('augmented hyperedge representation after multiplication with incidence matrix ---V*C',e.shape)
#         # print('the output of hyp feature trans ', x.shape)
#         print('output of hgc is ', e.shape)
#         return e
# #   def __init__(self,dim_in,dim,pe):

# #     super().__init__()
# #     self.pe_proj = nn.Conv2d(dim_in, dim, 1, bias=False)
# #     self.pe = pe
# #   def forward(self,x,joint_label,he_weight):
# #     print('enter cnn')
# #     print('inp to hyp is ',x.shape)

# #     label = F.one_hot(torch.tensor(joint_label)).float().to(x.device)
# #         # print(label)
# #         # print('incidence matrix transpose label shape ',label.shape)
# #     #     # print('shape of x is ', x.shape)
# #     # print('the input of hyp feature trans ', x.shape)
# #     label1=label/label.sum(dim=0,keepdim=True)
# #     label1=label1/torch.sqrt(label.sum(dim=1,keepdim=True))
# #         # print('label1 shape is', label.shape)
# #     he_weight=he_weight.repeat(25).reshape(25,5)
# #         # print(he_weight)
# #         # print('he_weight shape',he_weight.shape)
# #     label1=he_weight*label1
# #         # print('label1 before permute shape',label1.shape)
# #     label1=label1.permute(1,0)
# #         # print('label 1 shape',label1.shape)
# #         # label1=label[joint_label]
# #     norm_label=(label/label.sum(dim=1,keepdim=True))
# #     h_adj=torch.matmul(norm_label,label1)


# #         # print('label1 shape',label1.shape)
# #     z=x@h_adj

# #         # z = x @ (label / label.sum(dim=0, keepdim=True))
# #         #print('incidence matrix transpose  after normalisation multiplied to N*C matrix for getting representation',z.shape)

# #         # w/o proj
# #         # z = z.permute(3, 0, 1, 2)
# #         # w/ proj
# #     z = self.pe_proj(z).permute(3, 0, 1, 2)
# #         #print('hyperedge representation shape after transformation ',z.shape)

# #     e = z[joint_label].permute(1, 2, 3, 0)
# #         #print('augmented hyperedge representation after multiplication with incidence matrix ---V*C',e.shape)
# #     print('the output of hyp feature trans ', x.shape)
# #     return e

class HGrnn(nn.Module):
    def __init__(self,dim_in,dim,pe,timesteps):
        super().__init__()
        self.timesteps=timesteps
        self.hgc1=HGconv(dim_in,dim,pe)
        self.hgc2=HGconv(dim_in,dim,pe)
        self.act = nn.Tanh()
    def forward(self,x,joint_label,he_weight,og_joint,og_he_weight):
        # print('enter rnn ')
        # print('input shape is ',x.shape)
        h1=self.act(self.hgc1(x[:,:,0,:].unsqueeze(2),joint_label,he_weight,og_joint,og_he_weight))
        op=h1
        for i in range(1,self.timesteps):
            temp_op=self.act(self.hgc1(x[:,:,i,:].unsqueeze(2),joint_label,he_weight,og_joint,og_he_weight)+self.hgc2(h1,joint_label,he_weight,og_joint,og_he_weight))
            op=torch.cat((op,temp_op),2)
            h1=temp_op
        # print('op shape from hrnn is ',op.shape)
        return op
#   def __init__(self,dim_in,dim,pe,timesteps):
#     super().__init__()
#     self.timesteps=timesteps
#     self.hgc1=HGconv(dim_in,dim,pe)
#     self.hgc2=HGconv(dim_in,dim,pe)
#     self.act = nn.Tanh()
#   def forward(self,x,joint_label,he_weight):
#     print('enter rnn ')
#     print('input shape is ',x.shape)
#     h1=self.act(self.hgc1(x[:,:,0,:].unsqueeze(2),joint_label,he_weight))
#     op=h1
#     for i in range(1,self.timesteps):
#       temp_op=self.act(self.hgc1(x[:,:,i,:].unsqueeze(2),joint_label,he_weight)+self.hgc2(h1,joint_label,he_weight))
#       op=torch.cat((op,temp_op),2)
#       h1=temp_op
#     print('op shape from hrnn is ',op.shape)
#     return op
###############-----------VIT_main()-----------###############
class unit_vit(nn.Module):
    def __init__(self, dim_in, dim, A, num_of_heads, 
                       add_skip_connection=True,  
                       qkv_bias=False, qk_scale=None, 
                       drop=0., attn_drop=0.,drop_path=0, 
                       act_layer=nn.GELU, norm_layer=nn.LayerNorm, 
                       layer=0, insert_cls_layer=0, pe=False, 
                       num_point=25,temp=False,timesteps=64, **kwargs):
        super().__init__()
        
        ##Arguments
        self.dim_in = dim_in
        self.dim = dim
        self.add_skip_connection = add_skip_connection
        self.num_point = num_point
        self.pe = pe
        
        ##Methods
        self.norm1 = norm_layer(dim_in)
        self.attn = MHSA(dim_in, dim, A, num_heads=num_of_heads, 
                         qkv_bias=qkv_bias, qk_scale=qk_scale, 
                         attn_drop=attn_drop, proj_drop=drop, 
                         insert_cls_layer=insert_cls_layer, pe=pe, 
                         num_point=num_point, layer=layer, **kwargs)     
        
        self.pe_proj = nn.Conv2d(dim_in, dim, 1, bias=False)
        if self.dim_in != self.dim:
            self.skip_proj = nn.Conv2d(dim_in, dim, (1, 1), padding=(0, 0), bias=False)
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        if(temp==True):
            self.hgc=HGrnn(dim_in,dim,pe,timesteps)
        else:
            self.hgc=HGconv(dim_in,dim,pe)
     


    def forward(self, x, joint_label, groups, he_weight,og_joint,og_he_weight):
        # label = F.one_hot(torch.tensor(joint_label)).float().to(x.device)
        # label1=label/label.sum(dim=0,keepdim=True)
        # label1=label1/torch.sqrt(label.sum(dim=1,keepdim=True))
        # he_weight=he_weight.repeat(25).reshape(25,5)
        # label1=he_weight*label1
        # label1=label1.permute(1,0)
        # norm_label=(label/label.sum(dim=1,keepdim=True))
        # h_adj=torch.matmul(norm_label,label1)
        # z=x@h_adj
        # z = self.pe_proj(z).permute(3, 0, 1, 2)
        # e = z[joint_label].permute(1, 2, 3, 0)
        e=self.hgc(x,joint_label,he_weight,og_joint,og_he_weight)
        if self.add_skip_connection:
            if self.dim_in != self.dim:
                x = self.skip_proj(x) + self.drop_path(self.attn(self.norm1(x.permute(0, 2, 3, 1)).permute(0, 3, 1, 2), e))
            else:
                x = x + self.drop_path(self.attn(self.norm1(x.permute(0, 2, 3, 1)).permute(0, 3, 1, 2), e))
        else:
            x = self.drop_path(self.attn(self.norm1(x.permute(0, 2, 3, 1)).permute(0, 3, 1, 2), e))

        return x
###############-----------VIT_main()-----------###############
##%%%%%%%%%%%%%%%%-----------VIT-----------%%%%%%%%%%%%%%%%##



##################-----------TCN+VIT-----------##################
class TCN_ViT_unit(nn.Module):
    def __init__(self, in_channels, out_channels, A, stride=1, num_of_heads=6, residual=True, kernel_size=5, dilations=[1,2], pe=False, num_point=25, layer=0,temp=False,timesteps=64):
        super(TCN_ViT_unit, self).__init__()
        
        ##Arguments
        self.in_channels = in_channels
        self.out_channels = out_channels
        self.stride = stride
        
        ##Methods
        self.vit1 = unit_vit(in_channels, out_channels, A ,add_skip_connection=residual, num_of_heads=num_of_heads, pe=pe, num_point=num_point, layer=layer,temp=temp,timesteps=timesteps)
        self.tcn1 = MultiScale_TemporalConv(out_channels, out_channels, kernel_size=kernel_size, stride=stride, dilations=dilations, residual=False)
        self.act = nn.ReLU(inplace=True)

        if not residual:
            self.residual = lambda x: 0

        elif (in_channels == out_channels) and (stride == 1):
            self.residual = lambda x: x

        else:
            self.residual = unit_tcn(in_channels, out_channels, kernel_size=1, stride=stride)

    def forward(self, x, joint_label, groups,he_weight,og_joint,og_he_weight):
        y = self.act(self.tcn1(self.vit1(x, joint_label, groups,he_weight,og_joint,og_he_weight)) + self.residual(x))
        return y
##################-----------TCN+VIT-----------##################
class GCNDecoder_sec(torch.nn.Module):
    def __init__(self, in_channels, out_channels):
        super(GCNDecoder_sec, self).__init__()
        self.conv1=GCNConv(216,64, cached=True) # cached only for transductive learning
        
        self.conv2=GCNConv(64, 8, cached=True)
        self.conv3=GCNConv(8, 3, cached=True)
        # self.conv4=GCNConv(32, 16, cached=True)
        # self.conv5=GCNConv(16, 8, cached=True)
        # self.conv6=GCNConv(8, 3, cached=True)
        self.bn1=nn.BatchNorm1d(64)
        self.bn2=nn.BatchNorm1d(8)
        # self.bn3=nn.BatchNorm1d(3)

    def forward(self, x, edge_index):
        # print('input shape for decoder is ',x.shape)
        x = self.conv1(x, edge_index).relu()
        # print('shape of x is ',x.shape)
        x=x.squeeze(0)
        x=x.permute(0,2,1)
        x=self.bn1(x)
        x=x.unsqueeze(3)
        x=x.permute(3,0,2,1)
        x1=self.conv2(x, edge_index)
        x2=x1.relu()
        x2=x2.squeeze(0)
        x2=x2.permute(0,2,1)
        x2=self.bn2(x2)
        x2=x2.unsqueeze(3)
        x2=x2.permute(3,0,2,1)
        
        # x1=self.conv3(x, edge_index).relu()
        # x=self.conv4(x, edge_index).relu()
        # x1=self.conv5(x, edge_index).relu()
        
        return self.conv3(x2, edge_index), x1
##################-----------Extended_Model-----------##################


class ChannelAttention(nn.Module):
    def __init__(self, num_feat, squeeze_factor=5):
        super(ChannelAttention, self).__init__()
        self.pool = nn.AdaptiveAvgPool2d(1)                                        #[128, 216, 16, 25]->[128, 216, 1, 1]
        self.lin1 = nn.Linear(num_feat, num_feat // squeeze_factor, bias=True)  #[128, 216, 1, 1]->[128, 13, 1, 1]
        self.act = nn.ReLU(inplace=True)
        self.lin2 = nn.Linear(num_feat // squeeze_factor, num_feat, bias=True)  #[128, 13, 1, 1]->[128, 216, 1, 1]
        self.sig = nn.Sigmoid()

    def forward(self, x):                  #[128, 25, 216, 16]
        x_mod = self.pool(x)               #[128, 25, 216, 16]->[128, 25, 1, 1]
        x_mod = x_mod.permute(0, 2, 3, 1)  #[128, 25, 1, 1]->[128, 1, 1, 25]
        x_mod = self.lin1(x_mod)           #[128, 1, 1, 25]->[128, 1, 1, 5]
        x_mod = self.act(x_mod)            #[128, 1, 1, 5]->[128, 1, 1, 5]
        x_mod = self.lin2(x_mod)           #[128, 1, 1, 5]->[128, 1, 1, 25]
        x_mod = self.sig(x_mod)            #[128, 1, 1, 25]->[128, 1, 1, 25]
        return x.permute(0, 2, 3, 1) * x_mod    #[128, 216, 16, 25]*[128, 1, 1, 25]->[128, 216, 16, 25]

class FAB(nn.Module):
    def __init__(self, num_feat, compress_ratio=4, squeeze_factor=16):
        super(FAB, self).__init__()

        self.conv1 = nn.Conv1d(num_feat, num_feat // compress_ratio, kernel_size=3, stride=1, padding=1)  #[128, 216, 16, 25]->128, 54, 16, 25]
        self.act = nn.GELU()                                                 #[128, 216, 16, 25]
        self.conv2 = nn.Conv1d(num_feat // compress_ratio, num_feat, kernel_size=3, stride=1, padding=1)  #[128, 54, 16, 25]->[128, 216, 16, 25]
        self.att = ChannelAttention(num_feat, squeeze_factor)                #[128, 216, 16, 25]->128, 216, 16, 25]
                                 
    def forward(self, x):   #[128, 216, 16, 25]
        NM, C, T, V = x.size()
        x_mod = x.reshape(NM, -1, V).permute(0, 2, 1).contiguous() #[128, 216, 16, 25]->[128, 25, 3456]
        x_mod = self.conv1(x_mod)  #[128, 25, 3456]->#[128, 6, 3456]
        x_mod = self.act(x_mod)    #[128, 6, 3456]
        x_mod = self.conv2(x_mod)  #[128, 6, 3456]->[128, 25, 3456]
        x_mod = F.normalize(x_mod.reshape(NM, -1, C, T).contiguous(), p=2, dim=1) #[128, 25, 3456]->[128, 25, 216, 16]
        x_att = self.att(x_mod)     #[128, 25, 216, 16]->[128, 216, 16, 25]
        return x_att      
class WeightMlp(nn.Module):
    def __init__(self, num_feat, squeeze_factor=5):
        super(ChannelAttention, self).__init__()
        self.pool = nn.AdaptiveAvgPool2d(1)                                        #[128, 216, 16, 25]->[128, 216, 1, 1]
        self.lin1 = nn.Linear(num_feat, num_feat // squeeze_factor, bias=True)  #[128, 216, 1, 1]->[128, 13, 1, 1]
        self.act = nn.ReLU(inplace=True)
        self.lin2 = nn.Linear(num_feat // squeeze_factor, num_feat, bias=True)  #[128, 13, 1, 1]->[128, 216, 1, 1]
        self.sig = nn.Sigmoid()

    def forward(self, x):                  #[128, 25, 216, 16]
        x_mod = self.pool(x)               #[128, 25, 216, 16]->[128, 25, 1, 1]
        x_mod = x_mod.permute(0, 2, 3, 1)  #[128, 25, 1, 1]->[128, 1, 1, 25]
        x_mod = self.lin1(x_mod)           #[128, 1, 1, 25]->[128, 1, 1, 5]
        x_mod = self.act(x_mod)            #[128, 1, 1, 5]->[128, 1, 1, 5]
        x_mod = self.lin2(x_mod)           #[128, 1, 1, 5]->[128, 1, 1, 25]
        x_mod = self.sig(x_mod)            #[128, 1, 1, 25]->[128, 1, 1, 25]
        return  x_mod    #[128, 216, 16, 25]*[128, 1, 1, 25]->[128, 216, 16, 25]
class VectorQuantizer(nn.Module):
    """
    Discretization bottleneck part of the VQ-VAE.

    Inputs:
    - n_e : number of embeddings
    - e_dim : dimension of embedding
    - beta : commitment cost used in loss term, beta * ||z_e(x)-sg[e]||^2
    """

    def __init__(self, n_e, e_dim, beta):
        super(VectorQuantizer, self).__init__()
        self.n_e = n_e
        self.e_dim = e_dim
        self.beta = beta

        self.embedding = nn.Embedding(self.n_e, self.e_dim)
        self.embedding.weight.data.uniform_(-1.0 / self.n_e, 1.0 / self.n_e)

    def forward(self, z):
        """
        Inputs the output of the encoder network z and maps it to a discrete 
        one-hot vector that is the index of the closest embedding vector e_j

        z (continuous) -> z_q (discrete)

        z.shape = (batch, channel, height, width)

        quantization pipeline:

            1. get encoder input (B,C,H,W)
            2. flatten input to (B*H*W,C)

        """
        # reshape z -> (batch, height, width, channel) and flatten
        # print('shape of z is ',z.shape)
        z = z.permute(0, 2, 3, 1).contiguous()
        N_,V_,_,_=z.shape
        # print('shape of z is ',z.shape)
        z_flattened = z.view(-1, self.e_dim)
        # print('shape of z_flat is ',z_flattened.shape)
        # print('shape of z is',z.shape)
        # print('shape of z flat is',z_flattened.shape)
        # distances from z to embeddings e_j (z - e)^2 = z^2 + e^2 - 2 e * z
        # print('shape of emb wt is', self.embedding.weight.shape)

        d = torch.sum(z_flattened ** 2, dim=1, keepdim=True) + \
            torch.sum(self.embedding.weight**2, dim=1) - 2 * \
            torch.matmul(z_flattened, self.embedding.weight.t())
            
        # print('shape of emb wt is', d.shape)

        # find closest encodings
        min_encoding_indices = torch.argmin(d, dim=1).unsqueeze(1)
        # print(min_encoding_indices)
        # print('shape of min encoding ind is',min_encoding_indices.shape)
        # min_encoding_indices.view(_,V_)
        min_encodings = torch.zeros(
            min_encoding_indices.shape[0], self.n_e).to(z.device)
        # print('min_encoding device ',min_encoding)
        # print('shape of min encoding ',min_encodings.shape)
        min_encodings.scatter_(1, min_encoding_indices, 1)
        # print('shape of min encoding ',min_encodings.shape)

        # get quantized latent vectors
        # print('device os min_encodings',min_encodings.device)
        # print('device os embedding weight',self.embedding.weight.device)
        min_encoding_indices=min_encoding_indices.view(N_,V_)
        z_q = torch.matmul(min_encodings, self.embedding.weight).view(z.shape)
        # print('shape of z_q',z_q.shape)

        # compute loss for embedding
        # loss = torch.mean((z_q.detach()-z)**2) + self.beta * \
            # torch.mean((z_q - z.detach()) ** 2)
            
        loss =   torch.mean((z_q - z.detach()) ** 2)

        # preserve gradients
        z_q = z + (z_q - z).detach()

        # perplexity
        e_mean = torch.mean(min_encodings, dim=0)
        perplexity = torch.exp(-torch.sum(e_mean * torch.log(e_mean + 1e-10)))

        # reshape back to match original input shape
        z_q = z_q.permute(0, 3, 1, 2).contiguous()
        # print('shape of z_q',z_q.shape)
        

        return loss, z_q, perplexity, min_encodings, min_encoding_indices
class hyp_gen(nn.Module):
    def __init__(self,num_features,out_channels,n_points):
        super(hyp_gen,self).__init__()
        self.dec=GCNDecoder_sec(in_channels=num_features,out_channels=out_channels) 
        self.fab=FAB(n_points)
        self.weight_find = WeightMlp(num_points, squeeze_factor=16) 
        self.pool = nn.AdaptiveAvgPool2d(1)
        self.k=5
        self.vq=VectorQuantizer(n_e=5,e_dim=8,beta=0.25)
    def forward(self,x,edge_index):
        emb=x
        # adj=self.graph.adj
        # adj_t = torch.tensor(adj)
        # edge_index = adj_t.nonzero().t().contiguous().to(x.device)
        attn=self.weight_find(emb) # [128,1,1,25]
        # channel_x = self.fab(emb)     #[128, 216, 16, 25]->[128, 216, 16, 25]
        # # print('channel_x is  ',channel_x)
        # emb=emb + 0.2*channel_x                 #[128, 216, 16, 25]+[128, 216, 16, 25]->[128, 216, 16, 25]
        # # print('shape of op emb was ', emb.shape)
        # n_weight=self.pool(F.normalize(channel_x.permute(0,3,1,2), p=2, dim=1)).permute(1,0,2,3) #[128, 1, 1, 25]->[25, 128, 1, 1]
        n_weight=attn.permute(3,0,1,2)
        # print('n_weight is ',n_weight)
        # n_weight=self.sqx(emb)  #[128, 25, 1, 1]
        # weight_mul=n_weight.permute(0,2,3,1)
        # # print('shape of he_Weight is ',weight_mul.shape)
        # emb=emb+0.2*weight_mul
        # n_weight=n_weight.permute(1,0,2,3) #[25, 128, 1, 1]
        n_weight=torch.squeeze(n_weight,3) #[25, 128, 1]
        # print('shape of weight  is ',n_weight.shape)
        #n_weight=F.avg_pool2d(n_weight, kernel_size=n_weight.size()[1:3]) #[25, 1, 1]
        #n_weight=torch.squeeze(n_weight,2)  #[25, 1]
        # print('shape of weight  after pool is ',n_weight.shape)
        # label = F.one_hot(torch.tensor(jl)).float().to(emb.device)
        # label=label.permute(1,0)
        # he_weight=torch.matmul(label,n_weight)/n_weight.sum()
        # he_weight=he_weight.squeeze(1)
        # print('shape of weight  hyperedge is ',n_weight.shape)
        n_weight=n_weight.permute(1,0,2)
        emb2=emb.permute(0,3,1,2)
        N_, V_, C_, T_ = emb2.shape
        emb2 = emb2.reshape(-1, V_*C_, T_)
        emb2=F.avg_pool1d(emb2, kernel_size=emb2.size()[2])
        emb2 = emb2.reshape(N_, V_, C_, -1).permute(3, 0, 1, 2).contiguous()
        # print('shape of emb to dec is ',emb2)
        recon,k_emb=self.dec(emb2, edge_index)
        emb1 = k_emb.detach().permute(2,3,0,1)
        # print('k_emb is ',emb1)
        # print('shape of emb1 here is', emb1.shape)
        # input()
        emb1=emb1.permute(0,1,3,2)
        emb1=emb1.squeeze(3)
        # emb1 = F.avg_pool2d(emb1, kernel_size=emb1.size()[2:])
        # emb1 = torch.squeeze(emb1, (2,3))
        emb1=emb1.permute(2,0,1)
        emb1=F.normalize(emb1, p=2, dim=2)
        # print('shape of emb to k-means is ',n_weight.shape)
        # data_size=emb1.shape[0]
        # dim=emb1.shape[1]
        # X=emb1.cpu().numpy()
        # print('input type to generation is', X.shape)
        # print('shape of emb to k-means is ',X.shape)
        # l1=X.shape[0]
        # joint_label=[]
        emb1=emb1.permute(0,2,1).unsqueeze(3)
    
        # vq=VectorQuantizer(n_e=5,e_dim=8,beta=0.25)
        qe,_,_,_,ind=self.vq(emb1)
    # print(ind.shape)
        # ind=ind.view(N_,V_)
        # print(ind.shape)
        # print(ind)
        # for i in range(l1):
        #     # print('shape of inp to kmeans is ',X[i].shape)
        #     # print(X[i])
        #     clus=KMeans(n_clusters=self.k, random_state=0, n_init="auto").fit(X[i])
        #     joint_label.append(clus.labels_.tolist())
        # clus=KMeans(n_clusters=self.k, random_state=0, n_init="auto").fit(X)
        # joint_label=clus.labels_.tolist()
        # if(tr==True):
        #     clus=KMeans(n_clusters=self.k, random_state=0, n_init="auto").fit(X)
        #     joint_label=clus.labels_.tolist()
        # else:
        #     joint_label=jl
        
        # print('joint_label k-means ',joint_label)
        # label1 = F.one_hot(torch.tensor(joint_label)).float().to(emb.device)
        # print('n_weight is', n_weight )
        label1 = F.one_hot(ind).float().to(emb.device)
        joint_label=ind.tolist()
        # print('joint_label is',joint_label)
        # print('joint_label k-means ',joint_label)
        label1=label1.permute(0,2,1)
        he_weight=torch.matmul(label1,n_weight)
        he_weight=he_weight/he_weight.sum(dim=1,keepdim=True)
        he_weight=he_weight.squeeze(2)
        # print('he_weight  is ',he_weight)
        
        # he_weight=torch.ones(int(N_),5).to(x.device)
        return he_weight,joint_label,emb,recon,qe
    

##################-----------Original_Model-----------##################
class Model(nn.Module):
    def __init__(self,nf,oc, num_class=60, num_point=20, num_person=2, graph=None, graph_args=dict(), in_channels=3, drop_out=0, num_of_heads=9,  **kwargs):
        super(Model, self).__init__()
        
        ##Arguments
        self.num_of_heads = num_of_heads
        self.num_class = num_class
        self.num_point = num_point
        self.num_person = num_person
        self.nf=nf
        self.oc=oc
        ##Methods
        #DefineAdjacency
        if graph is None:
            raise ValueError()
        else:
            Graph = import_class(graph)
            self.graph = Graph(**graph_args)
        A = self.graph.A  # 3,25,25
        self.gen=hyp_gen(num_features=nf,out_channels=oc,n_points=num_point)
        #DefineLayers
        self.l1 = TCN_ViT_unit(3, 24*num_of_heads, A, residual=True, num_of_heads=num_of_heads, pe=True, num_point=num_point, layer=1,temp=False,timesteps=64)
        # input()
        # * num_heads, effect of concatenation following the official implementation
        self.l2 = TCN_ViT_unit(24*num_of_heads, 24*num_of_heads, A, residual=True, num_of_heads=num_of_heads, pe=True, num_point=num_point, layer=2,temp=False,timesteps=64)
        self.l3 = TCN_ViT_unit(24*num_of_heads, 24*num_of_heads, A, residual=True, num_of_heads=num_of_heads, pe=True, num_point=num_point, layer=3)
        self.l4 = TCN_ViT_unit(24*num_of_heads, 24*num_of_heads, A, residual=True, num_of_heads=num_of_heads, pe=True, num_point=num_point, layer=4,temp=False,timesteps=64)
        self.l5 = TCN_ViT_unit(24*num_of_heads, 24*num_of_heads, A, residual=True, stride=2, num_of_heads=num_of_heads, pe=True, num_point=num_point, layer=5)
        # print(' shape of intermediate op is ',)
        self.l6 = TCN_ViT_unit(24*num_of_heads, 24*num_of_heads, A, residual=True, num_of_heads=num_of_heads, pe=True, num_point=num_point, layer=6,temp=False,timesteps=32)
        self.l7 = TCN_ViT_unit(24*num_of_heads, 24*num_of_heads, A, residual=True, num_of_heads=num_of_heads, pe=True, num_point=num_point, layer=7)
        # self.l8 = TCN_ViT_unit(24 * num_of_heads, 24 * num_of_heads, A, num_of_heads=num_of_heads)
        self.l8 = TCN_ViT_unit(24*num_of_heads, 24*num_of_heads, A, residual=True, stride=2, num_of_heads=num_of_heads, pe=True, num_point=num_point, layer=8,temp=False,timesteps=32)
        self.l9 = TCN_ViT_unit(24*num_of_heads, 24*num_of_heads, A, residual=True, num_of_heads=num_of_heads, pe=True, num_point=num_point, layer=9)
        self.l10 = TCN_ViT_unit(24*num_of_heads, 24*num_of_heads, A, residual=True, num_of_heads=num_of_heads, pe=True, num_point=num_point, layer=10,temp=False,timesteps=16)
        # standard ce loss
        #BatchNorm
        self.data_bn = nn.BatchNorm1d(num_person * in_channels * num_point)
        bn_init(self.data_bn, 1)
        
        #FC_Layer
        self.fc = nn.Linear(24*num_of_heads, num_class)
        nn.init.normal_(self.fc.weight, 0, math.sqrt(2. / num_class))
        
        #DropOut
        if drop_out:
            self.drop_out = nn.Dropout(drop_out)
        else:
            self.drop_out = lambda x: x
            

    def forward(self, x,y,joint_label,he_weight):
        groups = []
        for num in range(max(joint_label[0])+1):
            groups.append([ind for ind, element in enumerate(joint_label[0]) if element==num])

        N, C, T, V, M = x.size()
        x = x.permute(0, 4, 3, 1, 2).contiguous().view(N, M * V * C, T)
        x = self.data_bn(x)
        adj=self.graph.adj
        adj_t = torch.tensor(adj)
        edge_index = adj_t.nonzero().t().contiguous().to(x.device)

        ## n, c, t, v
        x = x.view(N, M, V, C, T).contiguous().view(N * M, V, C, T).permute(0, 2, 3, 1)

        x = self.l1(x, joint_label, groups,he_weight,joint_label,he_weight)
        x = self.l2(x, joint_label, groups,he_weight,joint_label,he_weight)
        he_weight1,jl1,emb,rec,qe=self.gen(x,edge_index)
        groups = []
        for num in range(max(jl1[0])+1):
            groups.append([ind for ind, element in enumerate(jl1[0]) if element==num])
        x = self.l3(x, joint_label, groups,he_weight1,joint_label,he_weight)
        x = self.l4(x, joint_label, groups,he_weight1,joint_label,he_weight)
        he_weight1,jl1,emb,rec,qe=self.gen(x,edge_index)
        groups = []
        for num in range(max(jl1[0])+1):
            groups.append([ind for ind, element in enumerate(jl1[0]) if element==num])
        x = self.l5(x, joint_label, groups,he_weight1,joint_label,he_weight)
        # print(' shape of intermediate op is ', x.shape)
        # he_weight1,jl1,emb,rec,qe=self.gen(x,edge_index)
        x = self.l6(emb, jl1, groups,he_weight1,joint_label,he_weight)
        he_weight1,jl1,emb,rec,qe=self.gen(x,edge_index)
        groups = []
        for num in range(max(jl1[0])+1):
            groups.append([ind for ind, element in enumerate(jl1[0]) if element==num])
        x = self.l7(emb, jl1, groups,he_weight1,joint_label,he_weight)
        x = self.l8(emb, jl1, groups,he_weight1,joint_label,he_weight)
        he_weight1,jl1,emb,rec,qe=self.gen(x,edge_index)
        groups = []
        for num in range(max(jl1[0])+1):
            groups.append([ind for ind, element in enumerate(jl1[0]) if element==num])
        x = self.l9(emb, jl1, groups,he_weight1,joint_label,he_weight)
        x = self.l10(emb, jl1, groups,he_weight1,joint_label,he_weight)


        # N*M, C, T, V
        _ , C, T, V = x.size()
        # spatial temporal average pooling
        # x = x.view(N, M, C, -1)
        # x = x.mean(3).mean(1)
        # x = self.drop_out(x)
        # x = self.fc(x)

        return x,y,rec,qe
##################-----------Original_Model-----------##################




##################-----------Extended_Model-----------##################
class SqEx(nn.Module):

    def __init__(self, n_features, reduction=16):
        super(SqEx, self).__init__()

        if n_features % reduction != 0:
            raise ValueError('n_features must be divisible by reduction (default = 16)')
        self.linear1 = nn.Linear(n_features, n_features // reduction, bias=True)
        self.nonlin1 = nn.ReLU(inplace=True)
        self.linear2 = nn.Linear(n_features // reduction, n_features, bias=True)
        self.nonlin2 = nn.Sigmoid()

    def forward(self, x):
        #n,m,t,v,c=x.size()
        nm,c,t,v=x.size()
        y=x.permute(0,3,2,1)
        y = F.avg_pool2d(y, kernel_size=y.size()[2:4])
        y = y.permute(0, 2, 3, 1)
        y = self.nonlin1(self.linear1(y))
        y = self.nonlin2(self.linear2(y))
        y = y.permute(0, 3, 1, 2)
        # y = x * y
        return y
##################-----------Extended_Model-----------##################



##################-----------Extended_Model-----------##################
class final_model(nn.Module):
    def __init__(self,num_class,num_features,out_channels,n_points,n_person, graph=None, graph_args=dict(), reduction=5,k=5,drop_out=0):
        super(final_model,self).__init__()
        
        ##Arguments
        self.k=k
        self.n_points=n_points
        self.num_class = num_class
        self.num_point = n_points
        self.num_person = n_person
        
        ##Methods
        #DefineGraph
        if graph is None:
            raise ValueError()
        else:
            Graph = import_class(graph)
            self.graph = Graph(**graph_args)
            
        #Model/Red-Exp/Decoder
        self.classifier_model=Model(num_class=num_class,num_person=n_person,num_point=n_points,in_channels=out_channels,graph=graph,graph_args=graph_args,nf=num_features,oc=out_channels)
        # self.sqx=SqEx(n_features=n_points,reduction=reduction)
        # self.dec=GCNDecoder_sec(in_channels=num_features,out_channels=out_channels) 
        # self.fab=FAB(n_points)
        #DropOut
        if drop_out:
            self.drop_out = nn.Dropout(drop_out)
        else:
            self.drop_out = lambda x: x
            
        #Fullyconnected
        self.fc = nn.Linear(216, num_class)
        
        self.pool = nn.AdaptiveAvgPool2d(1)
    def forward(self,x,y,tr=True,jl=None,he=None):
        # print('max_value of x is ', torch.max(x))
        # print('min value of x is',torch.min(x))
        N, C, T, V, M = x.size()
        adj=self.graph.adj
        adj_t = torch.tensor(adj)
        edge_index = adj_t.nonzero().t().contiguous().to(x.device)
        joint_hyp=[]
        b=N*M
        
        for i in range(b):
            joint_hyp.append(jl)
        he=he.unsqueeze(1)
        he=he.permute(1,0)
        he=he.repeat(b,1)
        emb,_,recon,qe =self.classifier_model(x,y,joint_label=joint_hyp,he_weight=he)
        # print('shape of emb is ',emb.shape)
        # channel_x = self.fab(emb)     #[128, 216, 16, 25]->[128, 216, 16, 25]
        # emb=emb + 0.2*channel_x                 #[128, 216, 16, 25]+[128, 216, 16, 25]->[128, 216, 16, 25]
        # print('shape of op emb was ', emb.shape)
        # n_weight=self.pool(F.normalize(channel_x.permute(0,3,1,2), p=2, dim=1)).permute(1,0,2,3) #[128, 1, 1, 25]->[25, 128, 1, 1]
        # # n_weight=self.sqx(emb)  #[128, 25, 1, 1]
        # # weight_mul=n_weight.permute(0,2,3,1)
        # # # print('shape of he_Weight is ',weight_mul.shape)
        # # emb=emb+0.2*weight_mul
        # # n_weight=n_weight.permute(1,0,2,3) #[25, 128, 1, 1]
        # n_weight=torch.squeeze(n_weight,3) #[25, 128, 1]
        # # print('shape of weight  is ',n_weight.shape)
        # n_weight=F.avg_pool2d(n_weight, kernel_size=n_weight.size()[1:3]) #[25, 1, 1]
        # n_weight=torch.squeeze(n_weight,2)  #[25, 1]
        # # print('shape of weight  after pool is ',n_weight.shape)
        # label = F.one_hot(torch.tensor(jl)).float().to(x.device)
        # label=label.permute(1,0)
        # # he_weight=torch.matmul(label,n_weight)/n_weight.sum()
        # # he_weight=he_weight.squeeze(1)
        # # print('shape of weight  hyperedge is ',n_weight.shape)
        
        # emb2=emb.permute(0,3,1,2)
        # N_, V_, C_, T_ = emb2.shape
        # emb2 = emb2.reshape(-1, V_*C_, T_)
        # emb2=F.avg_pool1d(emb2, kernel_size=emb2.size()[2])
        # emb2 = emb2.reshape(N_, V_, C_, -1).permute(3, 0, 1, 2).contiguous()
        # # print('shape of emb to dec is ',emb2.shape)
        # recon,k_emb=self.dec(emb2, edge_index)
        # emb1 = k_emb.detach().permute(2,3,0,1)
        # emb1 = F.avg_pool2d(emb1, kernel_size=emb1.size()[2:])
        # emb1 = torch.squeeze(emb1, (2,3))
        # emb1=F.normalize(emb1, p=2, dim=1)
        # # print('shape of emb to k-means is ',n_weight.shape)
        # data_size=emb1.shape[0]
        # dim=emb1.shape[1]
        # X=emb1.cpu().numpy()
        # # print('shape of emb to k-means is ',X.shape)
        # if(tr==True):
        #     clus=KMeans(n_clusters=self.k, random_state=0, n_init="auto").fit(X)
        #     joint_label=clus.labels_.tolist()
        # else:
        #     joint_label=jl
        
        # label1 = F.one_hot(torch.tensor(joint_label)).float().to(x.device)
        # label1=label1.permute(1,0)
        # he_weight=torch.matmul(label1,n_weight)/n_weight.sum()
        # he_weight=he_weight.squeeze(1)
        
        n,c,t,v,m=x.size()
        inp=x.permute(0,4,3,1,2)
        inp=torch.reshape(inp,(n*m,v,c,t))
        inp = inp.reshape(-1, v*c, t)
        inp = F.avg_pool1d(inp, kernel_size=inp.size()[2])
        inp = inp.reshape(n*m, v, c, -1).permute(3, 0, 1, 2).contiguous()
        
        #Classification Head
        _ , C, T, V = emb.size()
        op = emb.view(N, M, C, -1)
        op= op.mean(3).mean(1)
        op = self.drop_out(op)
        op = self.fc(op)
        joint_label=jl
        he_weight=he
        return op,inp,recon,joint_hyp[0],he[0], qe
##################-----------Extended_Model-----------##################
